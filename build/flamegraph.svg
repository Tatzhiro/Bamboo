<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >with all warmup</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>native_write_msr (4 samples, 0.05%)</title><rect x="1189.1" y="213" width="0.6" height="15.0" fill="rgb(251,107,22)" rx="2" ry="2" />
<text  x="1192.10" y="223.5" ></text>
</g>
<g >
<title>uncharge_page (6 samples, 0.08%)</title><rect x="1187.0" y="181" width="0.9" height="15.0" fill="rgb(223,200,49)" rx="2" ry="2" />
<text  x="1190.00" y="191.5" ></text>
</g>
<g >
<title>TxExecutor::LockRelease (194 samples, 2.47%)</title><rect x="652.8" y="325" width="29.1" height="15.0" fill="rgb(206,64,22)" rx="2" ry="2" />
<text  x="655.78" y="335.5" >Tx..</text>
</g>
<g >
<title>TxExecutor::writelockAcquire (3 samples, 0.04%)</title><rect x="14.5" y="389" width="0.5" height="15.0" fill="rgb(215,31,19)" rx="2" ry="2" />
<text  x="17.50" y="399.5" ></text>
</g>
<g >
<title>__ieee754_pow_fma (4 samples, 0.05%)</title><rect x="15.3" y="389" width="0.6" height="15.0" fill="rgb(248,21,29)" rx="2" ry="2" />
<text  x="18.26" y="399.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.01%)</title><rect x="1189.8" y="373" width="0.2" height="15.0" fill="rgb(212,52,39)" rx="2" ry="2" />
<text  x="1192.85" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::emplace_back&lt;unsigned long&amp;, Tuple*&amp;, char  (1 samples, 0.01%)</title><rect x="17.5" y="389" width="0.2" height="15.0" fill="rgb(229,19,12)" rx="2" ry="2" />
<text  x="20.51" y="399.5" ></text>
</g>
<g >
<title>__mplog_fma (1 samples, 0.01%)</title><rect x="1188.6" y="325" width="0.2" height="15.0" fill="rgb(225,203,54)" rx="2" ry="2" />
<text  x="1191.65" y="335.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (2 samples, 0.03%)</title><rect x="1084.6" y="293" width="0.3" height="15.0" fill="rgb(223,68,36)" rx="2" ry="2" />
<text  x="1087.60" y="303.5" ></text>
</g>
<g >
<title>sys_read (4 samples, 0.05%)</title><rect x="1081.6" y="261" width="0.6" height="15.0" fill="rgb(222,188,49)" rx="2" ry="2" />
<text  x="1084.59" y="271.5" ></text>
</g>
<g >
<title>dec_zone_page_state (3 samples, 0.04%)</title><rect x="1084.0" y="261" width="0.4" height="15.0" fill="rgb(226,50,22)" rx="2" ry="2" />
<text  x="1087.00" y="271.5" ></text>
</g>
<g >
<title>vfs_read (4 samples, 0.05%)</title><rect x="1081.6" y="245" width="0.6" height="15.0" fill="rgb(253,80,26)" rx="2" ry="2" />
<text  x="1084.59" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_read (4 samples, 0.05%)</title><rect x="1081.6" y="309" width="0.6" height="15.0" fill="rgb(244,212,49)" rx="2" ry="2" />
<text  x="1084.59" y="319.5" ></text>
</g>
<g >
<title>__perf_event_enable (4 samples, 0.05%)</title><rect x="1189.1" y="293" width="0.6" height="15.0" fill="rgb(229,209,52)" rx="2" ry="2" />
<text  x="1192.10" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (703 samples, 8.95%)</title><rect x="1082.9" y="405" width="105.6" height="15.0" fill="rgb(249,213,54)" rx="2" ry="2" />
<text  x="1085.95" y="415.5" >entry_SYSCAL..</text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.01%)</title><rect x="1188.8" y="277" width="0.1" height="15.0" fill="rgb(224,137,36)" rx="2" ry="2" />
<text  x="1191.80" y="287.5" ></text>
</g>
<g >
<title>mi_heap_collect (3 samples, 0.04%)</title><rect x="1081.1" y="325" width="0.5" height="15.0" fill="rgb(243,85,33)" rx="2" ry="2" />
<text  x="1084.14" y="335.5" ></text>
</g>
<g >
<title>arch_tlb_finish_mmu (2 samples, 0.03%)</title><rect x="1084.6" y="277" width="0.3" height="15.0" fill="rgb(242,3,15)" rx="2" ry="2" />
<text  x="1087.60" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (703 samples, 8.95%)</title><rect x="1082.9" y="389" width="105.6" height="15.0" fill="rgb(243,55,50)" rx="2" ry="2" />
<text  x="1085.95" y="399.5" >do_syscall_64</text>
</g>
<g >
<title>__vfs_read (4 samples, 0.05%)</title><rect x="1081.6" y="229" width="0.6" height="15.0" fill="rgb(249,89,29)" rx="2" ry="2" />
<text  x="1084.59" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="1082.3" y="325" width="0.6" height="15.0" fill="rgb(241,166,44)" rx="2" ry="2" />
<text  x="1085.35" y="335.5" ></text>
</g>
<g >
<title>exit_mmap (703 samples, 8.95%)</title><rect x="1082.9" y="309" width="105.6" height="15.0" fill="rgb(234,175,19)" rx="2" ry="2" />
<text  x="1085.95" y="319.5" >exit_mmap</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (8 samples, 0.10%)</title><rect x="1162.5" y="197" width="1.2" height="15.0" fill="rgb(210,72,8)" rx="2" ry="2" />
<text  x="1165.52" y="207.5" ></text>
</g>
<g >
<title>Tuple::sortAdd (3 samples, 0.04%)</title><rect x="10.5" y="389" width="0.4" height="15.0" fill="rgb(213,222,35)" rx="2" ry="2" />
<text  x="13.45" y="399.5" ></text>
</g>
<g >
<title>perf_event_task_tick (1 samples, 0.01%)</title><rect x="1188.8" y="261" width="0.1" height="15.0" fill="rgb(248,8,39)" rx="2" ry="2" />
<text  x="1191.80" y="271.5" ></text>
</g>
<g >
<title>__ieee754_pow_fma (298 samples, 3.79%)</title><rect x="1035.8" y="325" width="44.7" height="15.0" fill="rgb(236,194,44)" rx="2" ry="2" />
<text  x="1038.80" y="335.5" >__ie..</text>
</g>
<g >
<title>uncharge_page (1 samples, 0.01%)</title><rect x="1188.3" y="197" width="0.2" height="15.0" fill="rgb(225,226,31)" rx="2" ry="2" />
<text  x="1191.35" y="207.5" ></text>
</g>
<g >
<title>unmap_vmas (690 samples, 8.78%)</title><rect x="1084.9" y="293" width="103.6" height="15.0" fill="rgb(251,100,14)" rx="2" ry="2" />
<text  x="1087.90" y="303.5" >unmap_vmas</text>
</g>
<g >
<title>free_unref_page_commit (3 samples, 0.04%)</title><rect x="1164.0" y="197" width="0.5" height="15.0" fill="rgb(208,158,26)" rx="2" ry="2" />
<text  x="1167.02" y="207.5" ></text>
</g>
<g >
<title>sleepMs (5 samples, 0.06%)</title><rect x="1082.2" y="357" width="0.7" height="15.0" fill="rgb(226,118,48)" rx="2" ry="2" />
<text  x="1085.19" y="367.5" ></text>
</g>
<g >
<title>task_work_run (1 samples, 0.01%)</title><rect x="1189.8" y="341" width="0.2" height="15.0" fill="rgb(228,115,16)" rx="2" ry="2" />
<text  x="1192.85" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.05%)</title><rect x="1081.6" y="293" width="0.6" height="15.0" fill="rgb(220,125,25)" rx="2" ry="2" />
<text  x="1084.59" y="303.5" ></text>
</g>
<g >
<title>mi_process_done (3 samples, 0.04%)</title><rect x="1081.1" y="341" width="0.5" height="15.0" fill="rgb(241,222,50)" rx="2" ry="2" />
<text  x="1084.14" y="351.5" ></text>
</g>
<g >
<title>TxExecutor::commit (200 samples, 2.54%)</title><rect x="651.9" y="341" width="30.0" height="15.0" fill="rgb(211,53,44)" rx="2" ry="2" />
<text  x="654.88" y="351.5" >Tx..</text>
</g>
<g >
<title>mem_cgroup_update_lru_size (1 samples, 0.01%)</title><rect x="1120.6" y="213" width="0.2" height="15.0" fill="rgb(221,196,35)" rx="2" ry="2" />
<text  x="1123.63" y="223.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.01%)</title><rect x="1189.8" y="389" width="0.2" height="15.0" fill="rgb(217,172,27)" rx="2" ry="2" />
<text  x="1192.85" y="399.5" ></text>
</g>
<g >
<title>unmap_page_range (689 samples, 8.77%)</title><rect x="1085.0" y="261" width="103.5" height="15.0" fill="rgb(253,208,32)" rx="2" ry="2" />
<text  x="1088.05" y="271.5" >unmap_page_r..</text>
</g>
<g >
<title>call_function_single_interrupt (4 samples, 0.05%)</title><rect x="1189.1" y="389" width="0.6" height="15.0" fill="rgb(243,66,5)" rx="2" ry="2" />
<text  x="1192.10" y="399.5" ></text>
</g>
<g >
<title>__run_exit_handlers (3 samples, 0.04%)</title><rect x="1081.1" y="357" width="0.5" height="15.0" fill="rgb(213,60,43)" rx="2" ry="2" />
<text  x="1084.14" y="367.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 0.05%)</title><rect x="1189.1" y="245" width="0.6" height="15.0" fill="rgb(252,183,21)" rx="2" ry="2" />
<text  x="1192.10" y="255.5" ></text>
</g>
<g >
<title>_vm_normal_page (3 samples, 0.04%)</title><rect x="1112.2" y="245" width="0.5" height="15.0" fill="rgb(236,39,26)" rx="2" ry="2" />
<text  x="1115.22" y="255.5" ></text>
</g>
<g >
<title>mmput (703 samples, 8.95%)</title><rect x="1082.9" y="325" width="105.6" height="15.0" fill="rgb(251,7,46)" rx="2" ry="2" />
<text  x="1085.95" y="335.5" >mmput</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (3 samples, 0.04%)</title><rect x="675.1" y="309" width="0.5" height="15.0" fill="rgb(226,158,37)" rx="2" ry="2" />
<text  x="678.15" y="319.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (4 samples, 0.05%)</title><rect x="1081.6" y="53" width="0.6" height="15.0" fill="rgb(218,105,15)" rx="2" ry="2" />
<text  x="1084.59" y="63.5" ></text>
</g>
<g >
<title>remote_function (4 samples, 0.05%)</title><rect x="1189.1" y="325" width="0.6" height="15.0" fill="rgb(205,164,38)" rx="2" ry="2" />
<text  x="1192.10" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (1 samples, 0.01%)</title><rect x="1120.5" y="213" width="0.1" height="15.0" fill="rgb(236,221,23)" rx="2" ry="2" />
<text  x="1123.48" y="223.5" ></text>
</g>
<g >
<title>___pte_free_tlb (2 samples, 0.03%)</title><rect x="1083.7" y="261" width="0.3" height="15.0" fill="rgb(236,203,54)" rx="2" ry="2" />
<text  x="1086.70" y="271.5" ></text>
</g>
<g >
<title>native_write_msr (1 samples, 0.01%)</title><rect x="1082.6" y="149" width="0.2" height="15.0" fill="rgb(219,98,46)" rx="2" ry="2" />
<text  x="1085.65" y="159.5" ></text>
</g>
<g >
<title>TxExecutor::readlockAcquire (1,002 samples, 12.75%)</title><rect x="683.4" y="325" width="150.5" height="15.0" fill="rgb(236,32,53)" rx="2" ry="2" />
<text  x="686.41" y="335.5" >TxExecutor::readloc..</text>
</g>
<g >
<title>TxExecutor::spinWait (31 samples, 0.39%)</title><rect x="941.4" y="325" width="4.6" height="15.0" fill="rgb(229,128,11)" rx="2" ry="2" />
<text  x="944.36" y="335.5" ></text>
</g>
<g >
<title>schedule_timeout (4 samples, 0.05%)</title><rect x="1081.6" y="165" width="0.6" height="15.0" fill="rgb(205,138,22)" rx="2" ry="2" />
<text  x="1084.59" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::emplace_back&lt;unsigned long&amp;, Tuple*&amp;&gt; (2 samples, 0.03%)</title><rect x="1034.6" y="325" width="0.3" height="15.0" fill="rgb(254,214,33)" rx="2" ry="2" />
<text  x="1037.60" y="335.5" ></text>
</g>
<g >
<title>native_flush_tlb_one_user (1 samples, 0.01%)</title><rect x="1082.5" y="149" width="0.1" height="15.0" fill="rgb(213,180,18)" rx="2" ry="2" />
<text  x="1085.50" y="159.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.06%)</title><rect x="681.2" y="309" width="0.7" height="15.0" fill="rgb(247,142,14)" rx="2" ry="2" />
<text  x="684.15" y="319.5" ></text>
</g>
<g >
<title>__GI___nanosleep (5 samples, 0.06%)</title><rect x="1082.2" y="341" width="0.7" height="15.0" fill="rgb(252,80,34)" rx="2" ry="2" />
<text  x="1085.19" y="351.5" ></text>
</g>
<g >
<title>schedule (4 samples, 0.05%)</title><rect x="1081.6" y="149" width="0.6" height="15.0" fill="rgb(238,20,52)" rx="2" ry="2" />
<text  x="1084.59" y="159.5" ></text>
</g>
<g >
<title>start_thread (7,083 samples, 90.13%)</title><rect x="17.7" y="389" width="1063.4" height="15.0" fill="rgb(214,201,39)" rx="2" ry="2" />
<text  x="20.66" y="399.5" >start_thread</text>
</g>
<g >
<title>free_pcp_prepare (2 samples, 0.03%)</title><rect x="1164.8" y="181" width="0.3" height="15.0" fill="rgb(207,184,34)" rx="2" ry="2" />
<text  x="1167.78" y="191.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (1 samples, 0.01%)</title><rect x="1188.8" y="229" width="0.1" height="15.0" fill="rgb(215,83,1)" rx="2" ry="2" />
<text  x="1191.80" y="239.5" ></text>
</g>
<g >
<title>free_unref_page_commit (1 samples, 0.01%)</title><rect x="1084.7" y="197" width="0.2" height="15.0" fill="rgb(251,41,0)" rx="2" ry="2" />
<text  x="1087.75" y="207.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.01%)</title><rect x="1188.8" y="325" width="0.1" height="15.0" fill="rgb(214,144,37)" rx="2" ry="2" />
<text  x="1191.80" y="335.5" ></text>
</g>
<g >
<title>unmap_single_vma (690 samples, 8.78%)</title><rect x="1084.9" y="277" width="103.6" height="15.0" fill="rgb(248,149,29)" rx="2" ry="2" />
<text  x="1087.90" y="287.5" >unmap_single..</text>
</g>
<g >
<title>task_numa_work (1 samples, 0.01%)</title><rect x="1189.8" y="325" width="0.2" height="15.0" fill="rgb(219,67,13)" rx="2" ry="2" />
<text  x="1192.85" y="335.5" ></text>
</g>
<g >
<title>TxExecutor::LockRelease (6 samples, 0.08%)</title><rect x="10.9" y="389" width="0.9" height="15.0" fill="rgb(248,108,1)" rx="2" ry="2" />
<text  x="13.90" y="399.5" ></text>
</g>
<g >
<title>__dec_node_page_state (1 samples, 0.01%)</title><rect x="1109.7" y="245" width="0.1" height="15.0" fill="rgb(233,19,17)" rx="2" ry="2" />
<text  x="1112.67" y="255.5" ></text>
</g>
<g >
<title>__pow (1 samples, 0.01%)</title><rect x="1188.6" y="389" width="0.2" height="15.0" fill="rgb(207,58,15)" rx="2" ry="2" />
<text  x="1191.65" y="399.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 0.05%)</title><rect x="1081.6" y="69" width="0.6" height="15.0" fill="rgb(212,190,45)" rx="2" ry="2" />
<text  x="1084.59" y="79.5" ></text>
</g>
<g >
<title>__libc_cfree (1 samples, 0.01%)</title><rect x="15.9" y="389" width="0.1" height="15.0" fill="rgb(213,210,15)" rx="2" ry="2" />
<text  x="18.86" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.01%)</title><rect x="1120.3" y="213" width="0.2" height="15.0" fill="rgb(231,54,12)" rx="2" ry="2" />
<text  x="1123.33" y="223.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 0.05%)</title><rect x="1082.3" y="165" width="0.6" height="15.0" fill="rgb(250,7,25)" rx="2" ry="2" />
<text  x="1085.35" y="175.5" ></text>
</g>
<g >
<title>TxExecutor::PromoteWaiters (5 samples, 0.06%)</title><rect x="672.3" y="309" width="0.7" height="15.0" fill="rgb(221,113,26)" rx="2" ry="2" />
<text  x="675.30" y="319.5" ></text>
</g>
<g >
<title>TxExecutor::write (1,339 samples, 17.04%)</title><rect x="833.9" y="341" width="201.0" height="15.0" fill="rgb(218,54,1)" rx="2" ry="2" />
<text  x="836.85" y="351.5" >TxExecutor::write</text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (4 samples, 0.05%)</title><rect x="1189.1" y="229" width="0.6" height="15.0" fill="rgb(249,40,32)" rx="2" ry="2" />
<text  x="1192.10" y="239.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (23 samples, 0.29%)</title><rect x="1159.1" y="197" width="3.4" height="15.0" fill="rgb(209,192,11)" rx="2" ry="2" />
<text  x="1162.07" y="207.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.01%)</title><rect x="1184.1" y="149" width="0.2" height="15.0" fill="rgb(230,222,12)" rx="2" ry="2" />
<text  x="1187.14" y="159.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.06%)</title><rect x="679.4" y="293" width="0.7" height="15.0" fill="rgb(242,228,24)" rx="2" ry="2" />
<text  x="682.35" y="303.5" ></text>
</g>
<g >
<title>tick_sched_handle (1 samples, 0.01%)</title><rect x="1188.8" y="309" width="0.1" height="15.0" fill="rgb(226,198,19)" rx="2" ry="2" />
<text  x="1191.80" y="319.5" ></text>
</g>
<g >
<title>__mod_zone_page_state (2 samples, 0.03%)</title><rect x="1183.8" y="149" width="0.3" height="15.0" fill="rgb(223,226,24)" rx="2" ry="2" />
<text  x="1186.84" y="159.5" ></text>
</g>
<g >
<title>main (9 samples, 0.11%)</title><rect x="1081.6" y="373" width="1.3" height="15.0" fill="rgb(211,113,16)" rx="2" ry="2" />
<text  x="1084.59" y="383.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (1 samples, 0.01%)</title><rect x="1082.3" y="149" width="0.2" height="15.0" fill="rgb(246,24,2)" rx="2" ry="2" />
<text  x="1085.35" y="159.5" ></text>
</g>
<g >
<title>TxExecutor::write (2 samples, 0.03%)</title><rect x="14.2" y="389" width="0.3" height="15.0" fill="rgb(254,142,24)" rx="2" ry="2" />
<text  x="17.20" y="399.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="1081.6" y="85" width="0.6" height="15.0" fill="rgb(248,184,39)" rx="2" ry="2" />
<text  x="1084.59" y="95.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="1188.8" y="357" width="0.1" height="15.0" fill="rgb(220,56,27)" rx="2" ry="2" />
<text  x="1191.80" y="367.5" ></text>
</g>
<g >
<title>n_tty_read (4 samples, 0.05%)</title><rect x="1081.6" y="197" width="0.6" height="15.0" fill="rgb(244,160,36)" rx="2" ry="2" />
<text  x="1084.59" y="207.5" ></text>
</g>
<g >
<title>free_pgtables (11 samples, 0.14%)</title><rect x="1082.9" y="293" width="1.7" height="15.0" fill="rgb(233,95,24)" rx="2" ry="2" />
<text  x="1085.95" y="303.5" ></text>
</g>
<g >
<title>free_unref_page_commit (128 samples, 1.63%)</title><rect x="1165.1" y="181" width="19.2" height="15.0" fill="rgb(217,86,54)" rx="2" ry="2" />
<text  x="1168.08" y="191.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 0.01%)</title><rect x="1189.8" y="357" width="0.2" height="15.0" fill="rgb(209,212,40)" rx="2" ry="2" />
<text  x="1192.85" y="367.5" ></text>
</g>
<g >
<title>tty_read (4 samples, 0.05%)</title><rect x="1081.6" y="213" width="0.6" height="15.0" fill="rgb(205,128,1)" rx="2" ry="2" />
<text  x="1084.59" y="223.5" ></text>
</g>
<g >
<title>TxExecutor::readlockAcquire (3 samples, 0.04%)</title><rect x="13.8" y="389" width="0.4" height="15.0" fill="rgb(236,199,7)" rx="2" ry="2" />
<text  x="16.75" y="399.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="1082.3" y="197" width="0.6" height="15.0" fill="rgb(245,76,39)" rx="2" ry="2" />
<text  x="1085.35" y="207.5" ></text>
</g>
<g >
<title>Tuple::ownersAdd (2 samples, 0.03%)</title><rect x="10.2" y="389" width="0.3" height="15.0" fill="rgb(252,220,42)" rx="2" ry="2" />
<text  x="13.15" y="399.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.03%)</title><rect x="1188.8" y="373" width="0.3" height="15.0" fill="rgb(217,29,24)" rx="2" ry="2" />
<text  x="1191.80" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;Procedure, std::allocator&lt;Procedure&gt; &gt;::emplace_back&lt;Ope, unsigned long&amp;&gt; (2 samples, 0.03%)</title><rect x="17.2" y="389" width="0.3" height="15.0" fill="rgb(242,131,24)" rx="2" ry="2" />
<text  x="20.21" y="399.5" ></text>
</g>
<g >
<title>ss2pl.exe (7,859 samples, 100.00%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(228,35,37)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >ss2pl.exe</text>
</g>
<g >
<title>event_function (4 samples, 0.05%)</title><rect x="1189.1" y="309" width="0.6" height="15.0" fill="rgb(206,9,44)" rx="2" ry="2" />
<text  x="1192.10" y="319.5" ></text>
</g>
<g >
<title>concat (8 samples, 0.10%)</title><rect x="16.0" y="389" width="1.2" height="15.0" fill="rgb(251,29,50)" rx="2" ry="2" />
<text  x="19.01" y="399.5" ></text>
</g>
<g >
<title>TxExecutor::LockRetire (196 samples, 2.49%)</title><rect x="911.9" y="325" width="29.5" height="15.0" fill="rgb(207,165,22)" rx="2" ry="2" />
<text  x="914.93" y="335.5" >Tx..</text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.05%)</title><rect x="1081.6" y="277" width="0.6" height="15.0" fill="rgb(251,21,3)" rx="2" ry="2" />
<text  x="1084.59" y="287.5" ></text>
</g>
<g >
<title>__exp1_fma (2 samples, 0.03%)</title><rect x="15.0" y="389" width="0.3" height="15.0" fill="rgb(230,91,16)" rx="2" ry="2" />
<text  x="17.95" y="399.5" ></text>
</g>
<g >
<title>x86_pmu_enable (1 samples, 0.01%)</title><rect x="1188.8" y="245" width="0.1" height="15.0" fill="rgb(233,102,52)" rx="2" ry="2" />
<text  x="1191.80" y="255.5" ></text>
</g>
<g >
<title>free_pcp_prepare (2 samples, 0.03%)</title><rect x="1163.7" y="197" width="0.3" height="15.0" fill="rgb(209,177,34)" rx="2" ry="2" />
<text  x="1166.72" y="207.5" ></text>
</g>
<g >
<title>memmove@plt (1 samples, 0.01%)</title><rect x="681.0" y="309" width="0.2" height="15.0" fill="rgb(229,89,52)" rx="2" ry="2" />
<text  x="684.00" y="319.5" ></text>
</g>
<g >
<title>generic_smp_call_function_single_interrupt (4 samples, 0.05%)</title><rect x="1189.1" y="357" width="0.6" height="15.0" fill="rgb(241,185,34)" rx="2" ry="2" />
<text  x="1192.10" y="367.5" ></text>
</g>
<g >
<title>native_write_msr (4 samples, 0.05%)</title><rect x="1081.6" y="37" width="0.6" height="15.0" fill="rgb(211,5,15)" rx="2" ry="2" />
<text  x="1084.59" y="47.5" ></text>
</g>
<g >
<title>sys_exit_group (703 samples, 8.95%)</title><rect x="1082.9" y="373" width="105.6" height="15.0" fill="rgb(210,177,2)" rx="2" ry="2" />
<text  x="1085.95" y="383.5" >sys_exit_group</text>
</g>
<g >
<title>native_write_msr (1 samples, 0.01%)</title><rect x="1188.8" y="197" width="0.1" height="15.0" fill="rgb(239,9,4)" rx="2" ry="2" />
<text  x="1191.80" y="207.5" ></text>
</g>
<g >
<title>__mod_zone_page_state (5 samples, 0.06%)</title><rect x="1158.3" y="197" width="0.8" height="15.0" fill="rgb(229,99,7)" rx="2" ry="2" />
<text  x="1161.32" y="207.5" ></text>
</g>
<g >
<title>nmi_handle (1 samples, 0.01%)</title><rect x="1082.8" y="149" width="0.1" height="15.0" fill="rgb(219,34,37)" rx="2" ry="2" />
<text  x="1085.80" y="159.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.01%)</title><rect x="1084.7" y="213" width="0.2" height="15.0" fill="rgb(226,30,33)" rx="2" ry="2" />
<text  x="1087.75" y="223.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (115 samples, 1.46%)</title><rect x="1167.0" y="165" width="17.3" height="15.0" fill="rgb(250,152,52)" rx="2" ry="2" />
<text  x="1170.03" y="175.5" ></text>
</g>
<g >
<title>schedule (4 samples, 0.05%)</title><rect x="1082.3" y="245" width="0.6" height="15.0" fill="rgb(240,160,0)" rx="2" ry="2" />
<text  x="1085.35" y="255.5" ></text>
</g>
<g >
<title>_mi_abandoned_reclaim_all (2 samples, 0.03%)</title><rect x="1081.1" y="309" width="0.3" height="15.0" fill="rgb(238,36,37)" rx="2" ry="2" />
<text  x="1084.14" y="319.5" ></text>
</g>
<g >
<title>finish_task_switch (4 samples, 0.05%)</title><rect x="1081.6" y="117" width="0.6" height="15.0" fill="rgb(247,198,20)" rx="2" ry="2" />
<text  x="1084.59" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;Procedure, std::allocator&lt;Procedure&gt; &gt;::emplace_back&lt;Ope, unsigned long&amp;&gt; (1 samples, 0.01%)</title><rect x="1188.5" y="405" width="0.1" height="15.0" fill="rgb(254,120,3)" rx="2" ry="2" />
<text  x="1191.50" y="415.5" ></text>
</g>
<g >
<title>__dec_node_page_state (5 samples, 0.06%)</title><rect x="1116.3" y="229" width="0.7" height="15.0" fill="rgb(205,58,3)" rx="2" ry="2" />
<text  x="1119.28" y="239.5" ></text>
</g>
<g >
<title>__mod_node_page_state (5 samples, 0.06%)</title><rect x="1157.6" y="197" width="0.7" height="15.0" fill="rgb(235,190,32)" rx="2" ry="2" />
<text  x="1160.57" y="207.5" ></text>
</g>
<g >
<title>dec_zone_page_state (2 samples, 0.03%)</title><rect x="1083.7" y="245" width="0.3" height="15.0" fill="rgb(205,9,32)" rx="2" ry="2" />
<text  x="1086.70" y="255.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow (4 samples, 0.05%)</title><rect x="1081.6" y="341" width="0.6" height="15.0" fill="rgb(234,216,37)" rx="2" ry="2" />
<text  x="1084.59" y="351.5" ></text>
</g>
<g >
<title>worker (7,083 samples, 90.13%)</title><rect x="17.7" y="357" width="1063.4" height="15.0" fill="rgb(250,58,37)" rx="2" ry="2" />
<text  x="20.66" y="367.5" >worker</text>
</g>
<g >
<title>__libc_cfree (14 samples, 0.18%)</title><rect x="673.0" y="309" width="2.1" height="15.0" fill="rgb(247,6,46)" rx="2" ry="2" />
<text  x="676.05" y="319.5" ></text>
</g>
<g >
<title>TxExecutor::begin (1 samples, 0.01%)</title><rect x="651.7" y="341" width="0.2" height="15.0" fill="rgb(218,152,10)" rx="2" ry="2" />
<text  x="654.73" y="351.5" ></text>
</g>
<g >
<title>TxExecutor::LockRetire (3 samples, 0.04%)</title><rect x="11.8" y="389" width="0.5" height="15.0" fill="rgb(213,211,6)" rx="2" ry="2" />
<text  x="14.80" y="399.5" ></text>
</g>
<g >
<title>__exp1_fma (101 samples, 1.29%)</title><rect x="1043.8" y="309" width="15.1" height="15.0" fill="rgb(246,187,48)" rx="2" ry="2" />
<text  x="1046.76" y="319.5" ></text>
</g>
<g >
<title>unlink_anon_vmas (1 samples, 0.01%)</title><rect x="1084.4" y="277" width="0.2" height="15.0" fill="rgb(233,168,39)" rx="2" ry="2" />
<text  x="1087.45" y="287.5" ></text>
</g>
<g >
<title>__pow (304 samples, 3.87%)</title><rect x="1034.9" y="341" width="45.6" height="15.0" fill="rgb(252,69,52)" rx="2" ry="2" />
<text  x="1037.90" y="351.5" >__pow</text>
</g>
<g >
<title>free_unref_page_prepare.part.65 (1 samples, 0.01%)</title><rect x="1186.8" y="197" width="0.2" height="15.0" fill="rgb(237,122,54)" rx="2" ry="2" />
<text  x="1189.85" y="207.5" ></text>
</g>
<g >
<title>libc_feholdsetround_sse_ctx (5 samples, 0.06%)</title><rect x="1058.9" y="309" width="0.8" height="15.0" fill="rgb(250,38,11)" rx="2" ry="2" />
<text  x="1061.92" y="319.5" ></text>
</g>
<g >
<title>__slowpow_fma (1 samples, 0.01%)</title><rect x="1188.6" y="341" width="0.2" height="15.0" fill="rgb(233,204,13)" rx="2" ry="2" />
<text  x="1191.65" y="351.5" ></text>
</g>
<g >
<title>__libc_start_main (12 samples, 0.15%)</title><rect x="1081.1" y="389" width="1.8" height="15.0" fill="rgb(232,33,0)" rx="2" ry="2" />
<text  x="1084.14" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_lock (16 samples, 0.20%)</title><rect x="1109.8" y="245" width="2.4" height="15.0" fill="rgb(220,226,30)" rx="2" ry="2" />
<text  x="1112.82" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;Procedure, std::allocator&lt;Procedure&gt; &gt;::emplace_back&lt;Ope, unsigned long&amp;&gt; (4 samples, 0.05%)</title><rect x="1080.5" y="341" width="0.6" height="15.0" fill="rgb(243,108,33)" rx="2" ry="2" />
<text  x="1083.54" y="351.5" ></text>
</g>
<g >
<title>do_group_exit (703 samples, 8.95%)</title><rect x="1082.9" y="357" width="105.6" height="15.0" fill="rgb(239,180,9)" rx="2" ry="2" />
<text  x="1085.95" y="367.5" >do_group_exit</text>
</g>
<g >
<title>tlb_flush_mmu_free (2 samples, 0.03%)</title><rect x="1084.6" y="261" width="0.3" height="15.0" fill="rgb(253,217,20)" rx="2" ry="2" />
<text  x="1087.60" y="271.5" ></text>
</g>
<g >
<title>__GI___clone (7,083 samples, 90.13%)</title><rect x="17.7" y="405" width="1063.4" height="15.0" fill="rgb(235,54,3)" rx="2" ry="2" />
<text  x="20.66" y="415.5" >__GI___clone</text>
</g>
<g >
<title>TxExecutor::commit (1 samples, 0.01%)</title><rect x="13.2" y="389" width="0.1" height="15.0" fill="rgb(214,92,15)" rx="2" ry="2" />
<text  x="16.15" y="399.5" ></text>
</g>
<g >
<title>ctx_resched (4 samples, 0.05%)</title><rect x="1189.1" y="277" width="0.6" height="15.0" fill="rgb(225,193,35)" rx="2" ry="2" />
<text  x="1192.10" y="287.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (4 samples, 0.05%)</title><rect x="1081.6" y="101" width="0.6" height="15.0" fill="rgb(224,97,9)" rx="2" ry="2" />
<text  x="1084.59" y="111.5" ></text>
</g>
<g >
<title>__mod_zone_page_state (2 samples, 0.03%)</title><rect x="1166.7" y="165" width="0.3" height="15.0" fill="rgb(225,118,13)" rx="2" ry="2" />
<text  x="1169.73" y="175.5" ></text>
</g>
<g >
<title>finish_task_switch (4 samples, 0.05%)</title><rect x="1082.3" y="213" width="0.6" height="15.0" fill="rgb(217,26,31)" rx="2" ry="2" />
<text  x="1085.35" y="223.5" ></text>
</g>
<g >
<title>_IO_getc (4 samples, 0.05%)</title><rect x="1081.6" y="357" width="0.6" height="15.0" fill="rgb(236,221,36)" rx="2" ry="2" />
<text  x="1084.59" y="367.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.08%)</title><rect x="680.1" y="293" width="0.9" height="15.0" fill="rgb(244,102,10)" rx="2" ry="2" />
<text  x="683.10" y="303.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="1082.3" y="181" width="0.6" height="15.0" fill="rgb(216,87,37)" rx="2" ry="2" />
<text  x="1085.35" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;SetElement&lt;Tuple&gt;, std::allocator&lt;SetElement&lt;Tuple&gt; &gt; &gt;::emplace_back&lt;unsigned long&amp;, Tuple*&amp;, char  (384 samples, 4.89%)</title><rect x="776.2" y="309" width="57.7" height="15.0" fill="rgb(254,139,36)" rx="2" ry="2" />
<text  x="779.20" y="319.5" >std::v..</text>
</g>
<g >
<title>flush_smp_call_function_queue (4 samples, 0.05%)</title><rect x="1189.1" y="341" width="0.6" height="15.0" fill="rgb(215,225,26)" rx="2" ry="2" />
<text  x="1192.10" y="351.5" ></text>
</g>
<g >
<title>__dec_node_state (5 samples, 0.06%)</title><rect x="1116.3" y="213" width="0.7" height="15.0" fill="rgb(247,99,34)" rx="2" ry="2" />
<text  x="1119.28" y="223.5" ></text>
</g>
<g >
<title>free_unref_page_prepare.part.65 (17 samples, 0.22%)</title><rect x="1184.3" y="181" width="2.5" height="15.0" fill="rgb(238,222,29)" rx="2" ry="2" />
<text  x="1187.29" y="191.5" ></text>
</g>
<g >
<title>all (7,859 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(210,227,40)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>__schedule (4 samples, 0.05%)</title><rect x="1081.6" y="133" width="0.6" height="15.0" fill="rgb(230,4,41)" rx="2" ry="2" />
<text  x="1084.59" y="143.5" ></text>
</g>
<g >
<title>worker (9 samples, 0.11%)</title><rect x="1188.6" y="405" width="1.4" height="15.0" fill="rgb(236,135,32)" rx="2" ry="2" />
<text  x="1191.65" y="415.5" ></text>
</g>
<g >
<title>_mi_page_free_collect (1 samples, 0.01%)</title><rect x="1081.4" y="309" width="0.2" height="15.0" fill="rgb(229,80,39)" rx="2" ry="2" />
<text  x="1084.44" y="319.5" ></text>
</g>
<g >
<title>TxExecutor::read (1,012 samples, 12.88%)</title><rect x="681.9" y="341" width="152.0" height="15.0" fill="rgb(211,167,16)" rx="2" ry="2" />
<text  x="684.90" y="351.5" >TxExecutor::read</text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.05%)</title><rect x="1189.1" y="261" width="0.6" height="15.0" fill="rgb(233,165,52)" rx="2" ry="2" />
<text  x="1192.10" y="271.5" ></text>
</g>
<g >
<title>smp_call_function_single_interrupt (4 samples, 0.05%)</title><rect x="1189.1" y="373" width="0.6" height="15.0" fill="rgb(236,49,18)" rx="2" ry="2" />
<text  x="1192.10" y="383.5" ></text>
</g>
<g >
<title>power1 (1 samples, 0.01%)</title><rect x="1188.6" y="357" width="0.2" height="15.0" fill="rgb(205,93,51)" rx="2" ry="2" />
<text  x="1191.65" y="367.5" ></text>
</g>
<g >
<title>TxExecutor::spinWait (1 samples, 0.01%)</title><rect x="10.0" y="405" width="0.2" height="15.0" fill="rgb(216,20,36)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge_list (6 samples, 0.08%)</title><rect x="1187.0" y="197" width="0.9" height="15.0" fill="rgb(211,159,2)" rx="2" ry="2" />
<text  x="1190.00" y="207.5" ></text>
</g>
<g >
<title>__dec_node_state (2 samples, 0.03%)</title><rect x="1117.0" y="229" width="0.3" height="15.0" fill="rgb(221,102,24)" rx="2" ry="2" />
<text  x="1120.03" y="239.5" ></text>
</g>
<g >
<title>hrtimer_nanosleep (4 samples, 0.05%)</title><rect x="1082.3" y="277" width="0.6" height="15.0" fill="rgb(219,172,42)" rx="2" ry="2" />
<text  x="1085.35" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (7,083 samples, 90.13%)</title><rect x="17.7" y="373" width="1063.4" height="15.0" fill="rgb(252,109,38)" rx="2" ry="2" />
<text  x="20.66" y="383.5" >[libstdc++.so.6.0.25]</text>
</g>
<g >
<title>__GI_exit (3 samples, 0.04%)</title><rect x="1081.1" y="373" width="0.5" height="15.0" fill="rgb(212,152,1)" rx="2" ry="2" />
<text  x="1084.14" y="383.5" ></text>
</g>
<g >
<title>free_unref_page_list (149 samples, 1.90%)</title><rect x="1164.5" y="197" width="22.3" height="15.0" fill="rgb(210,190,22)" rx="2" ry="2" />
<text  x="1167.48" y="207.5" >f..</text>
</g>
<g >
<title>concat (36 samples, 0.46%)</title><rect x="675.6" y="309" width="5.4" height="15.0" fill="rgb(234,61,35)" rx="2" ry="2" />
<text  x="678.60" y="319.5" ></text>
</g>
<g >
<title>__schedule (4 samples, 0.05%)</title><rect x="1082.3" y="229" width="0.6" height="15.0" fill="rgb(232,210,20)" rx="2" ry="2" />
<text  x="1085.35" y="239.5" ></text>
</g>
<g >
<title>Tuple::ownersAdd (18 samples, 0.23%)</title><rect x="1031.9" y="309" width="2.7" height="15.0" fill="rgb(245,209,12)" rx="2" ry="2" />
<text  x="1034.90" y="319.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.01%)</title><rect x="1189.7" y="389" width="0.1" height="15.0" fill="rgb(217,189,25)" rx="2" ry="2" />
<text  x="1192.70" y="399.5" ></text>
</g>
<g >
<title>Tuple::sortAdd (1 samples, 0.01%)</title><rect x="941.2" y="309" width="0.2" height="15.0" fill="rgb(222,128,16)" rx="2" ry="2" />
<text  x="944.21" y="319.5" ></text>
</g>
<g >
<title>do_exit (703 samples, 8.95%)</title><rect x="1082.9" y="341" width="105.6" height="15.0" fill="rgb(234,166,50)" rx="2" ry="2" />
<text  x="1085.95" y="351.5" >do_exit</text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.03%)</title><rect x="1188.8" y="389" width="0.3" height="15.0" fill="rgb(230,196,24)" rx="2" ry="2" />
<text  x="1191.80" y="399.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.01%)</title><rect x="1188.9" y="357" width="0.2" height="15.0" fill="rgb(229,171,33)" rx="2" ry="2" />
<text  x="1191.95" y="367.5" ></text>
</g>
<g >
<title>TxExecutor::read (3 samples, 0.04%)</title><rect x="13.3" y="389" width="0.5" height="15.0" fill="rgb(240,88,34)" rx="2" ry="2" />
<text  x="16.30" y="399.5" ></text>
</g>
<g >
<title>release_pages (2 samples, 0.03%)</title><rect x="1084.6" y="229" width="0.3" height="15.0" fill="rgb(215,213,29)" rx="2" ry="2" />
<text  x="1087.60" y="239.5" ></text>
</g>
<g >
<title>do_nanosleep (4 samples, 0.05%)</title><rect x="1082.3" y="261" width="0.6" height="15.0" fill="rgb(211,169,9)" rx="2" ry="2" />
<text  x="1085.35" y="271.5" ></text>
</g>
<g >
<title>TxExecutor::writelockAcquire (590 samples, 7.51%)</title><rect x="946.0" y="325" width="88.6" height="15.0" fill="rgb(219,32,14)" rx="2" ry="2" />
<text  x="949.01" y="335.5" >TxExecutor..</text>
</g>
<g >
<title>page_remove_rmap (31 samples, 0.39%)</title><rect x="1112.7" y="245" width="4.6" height="15.0" fill="rgb(229,91,28)" rx="2" ry="2" />
<text  x="1115.67" y="255.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.01%)</title><rect x="1188.8" y="293" width="0.1" height="15.0" fill="rgb(254,169,36)" rx="2" ry="2" />
<text  x="1191.80" y="303.5" ></text>
</g>
<g >
<title>wait_woken (4 samples, 0.05%)</title><rect x="1081.6" y="181" width="0.6" height="15.0" fill="rgb(232,95,45)" rx="2" ry="2" />
<text  x="1084.59" y="191.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1 samples, 0.01%)</title><rect x="1084.7" y="181" width="0.2" height="15.0" fill="rgb(208,68,8)" rx="2" ry="2" />
<text  x="1087.75" y="191.5" ></text>
</g>
<g >
<title>_start (12 samples, 0.15%)</title><rect x="1081.1" y="405" width="1.8" height="15.0" fill="rgb(210,14,33)" rx="2" ry="2" />
<text  x="1084.14" y="415.5" ></text>
</g>
<g >
<title>tlb_flush_mmu_free (474 samples, 6.03%)</title><rect x="1117.3" y="245" width="71.2" height="15.0" fill="rgb(235,222,32)" rx="2" ry="2" />
<text  x="1120.33" y="255.5" >tlb_flus..</text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.05%)</title><rect x="1082.3" y="309" width="0.6" height="15.0" fill="rgb(233,157,1)" rx="2" ry="2" />
<text  x="1085.35" y="319.5" ></text>
</g>
<g >
<title>mem_cgroup_update_lru_size (3 samples, 0.04%)</title><rect x="1187.9" y="197" width="0.4" height="15.0" fill="rgb(250,19,1)" rx="2" ry="2" />
<text  x="1190.90" y="207.5" ></text>
</g>
<g >
<title>flush_tlb_batched_pending (1 samples, 0.01%)</title><rect x="1084.9" y="261" width="0.1" height="15.0" fill="rgb(221,66,6)" rx="2" ry="2" />
<text  x="1087.90" y="271.5" ></text>
</g>
<g >
<title>__ieee754_pow_fma (1 samples, 0.01%)</title><rect x="1188.6" y="373" width="0.2" height="15.0" fill="rgb(248,130,11)" rx="2" ry="2" />
<text  x="1191.65" y="383.5" ></text>
</g>
<g >
<title>Tuple::sortAdd (29 samples, 0.37%)</title><rect x="771.8" y="309" width="4.4" height="15.0" fill="rgb(231,141,12)" rx="2" ry="2" />
<text  x="774.84" y="319.5" ></text>
</g>
<g >
<title>TxExecutor::PromoteWaiters (6 samples, 0.08%)</title><rect x="12.3" y="389" width="0.9" height="15.0" fill="rgb(221,214,33)" rx="2" ry="2" />
<text  x="15.25" y="399.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="1188.8" y="341" width="0.1" height="15.0" fill="rgb(239,27,18)" rx="2" ry="2" />
<text  x="1191.80" y="351.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (1 samples, 0.01%)</title><rect x="1188.8" y="213" width="0.1" height="15.0" fill="rgb(225,69,7)" rx="2" ry="2" />
<text  x="1191.80" y="223.5" ></text>
</g>
<g >
<title>release_pages (451 samples, 5.74%)</title><rect x="1120.8" y="213" width="67.7" height="15.0" fill="rgb(254,193,1)" rx="2" ry="2" />
<text  x="1123.78" y="223.5" >release..</text>
</g>
<g >
<title>libc_feresetround_sse_ctx (1 samples, 0.01%)</title><rect x="1059.7" y="309" width="0.1" height="15.0" fill="rgb(223,105,23)" rx="2" ry="2" />
<text  x="1062.67" y="319.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (474 samples, 6.03%)</title><rect x="1117.3" y="229" width="71.2" height="15.0" fill="rgb(224,98,38)" rx="2" ry="2" />
<text  x="1120.33" y="239.5" >free_pag..</text>
</g>
<g >
<title>[unknown] (50 samples, 0.64%)</title><rect x="10.2" y="405" width="7.5" height="15.0" fill="rgb(216,100,7)" rx="2" ry="2" />
<text  x="13.15" y="415.5" ></text>
</g>
<g >
<title>free_pgd_range (10 samples, 0.13%)</title><rect x="1082.9" y="277" width="1.5" height="15.0" fill="rgb(249,49,11)" rx="2" ry="2" />
<text  x="1085.95" y="287.5" ></text>
</g>
<g >
<title>sys_nanosleep (4 samples, 0.05%)</title><rect x="1082.3" y="293" width="0.6" height="15.0" fill="rgb(213,62,25)" rx="2" ry="2" />
<text  x="1085.35" y="303.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow (4 samples, 0.05%)</title><rect x="1081.6" y="325" width="0.6" height="15.0" fill="rgb(228,57,24)" rx="2" ry="2" />
<text  x="1084.59" y="335.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (2 samples, 0.03%)</title><rect x="1084.6" y="245" width="0.3" height="15.0" fill="rgb(214,204,43)" rx="2" ry="2" />
<text  x="1087.60" y="255.5" ></text>
</g>
<g >
<title>log1 (138 samples, 1.76%)</title><rect x="1059.8" y="309" width="20.7" height="15.0" fill="rgb(231,12,41)" rx="2" ry="2" />
<text  x="1062.82" y="319.5" ></text>
</g>
</g>
</svg>
